@page "/"
@using MudBlazor
@using OrderDeliverySystem.Client.Infrastructure.Services.Profile
@using OrderDeliverySystem.Client.Pages.Admin
@using OrderDeliverySystem.Client.Pages.Merchant
@using OrderDeliverySystem.Client.Pages.DeliveryWorker
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using System.Security.Claims
@using OrderDeliverySystem.Share.DTOs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IProfileService ProfileService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto


<AuthorizeView Roles="Admin,Merchant">
    <Authorized>
        <MudContainer Class="my-10 d-flex justify-content-center align-content-center" MaxWidth="MaxWidth.ExtraLarge" Style="min-height:620px">
            <MudPaper Class="pa-16 ma-2 d-flex justify-content-center align-content-center" Elevation="3" Width="100%" >
                <MudPaper Class="pa-16 ma-2" Elevation="0">

                    <MudText Typo="Typo.h3">Welcome to Dashboard</MudText>

                </MudPaper>

            </MudPaper>
           
        </MudContainer>
    </Authorized>

</AuthorizeView>

<AuthorizeView Roles="Worker">
    <Authorized>
        <MudContainer Class="my-10 d-flex justify-content-center align-content-center" MaxWidth="MaxWidth.ExtraLarge" Style="min-height:620px">
            <MudPaper Class="pa-16 ma-2 d-flex justify-content-center align-content-center" Elevation="3" Width="100%">
                <MudPaper Class="pa-16 ma-2" Elevation="0">

                    <MudText Typo="Typo.h3">Welcome to Dashboard</MudText>
                    <br />
                    <br />
                    <MudText Typo="Typo.h5">------------------- You are now @(model.Availability ? "available" : "unavailable") -------------------</MudText>
                    <br />
                    <MudButton Size="Size.Large" Class="mx-2" Variant="Variant.Filled" FullWidth="true" Color="Color.Error" OnClick="SetAvailability">@(model.Availability ? "Set Unavailable" : "Set Available")</MudButton>

                </MudPaper>

            </MudPaper>

        </MudContainer>
    </Authorized>

</AuthorizeView>

<AuthorizeView Roles="Customer">
    <Authorized>
        <MudContainer Class="my-10">

            <div style="position: relative; display: inline-block;">
                <MudImage Src="images/banner1.png" Alt="Swedish Farm House" Elevation="15" Class="rounded-lg mt-3" Style="width:100%" />
                <div Class="rounded-lg mt-3" style="position: absolute; top: 0; left: 0; width: 100%; height: 98%; background-color: rgba(50, 50, 50, 0.6);"></div>
                <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:100px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:350px;font-size:35px;color:white;">Order Now</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:75px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:250px;font-size:25px;color:white;">Order Now</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:50px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:150px;font-size:15px;color:white;">Order Now</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:30px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:150px;font-size:15px;color:white;">Order Now</MudButton>
                    </div>


                </MudHidden>


            </div>
        </MudContainer>
    </Authorized>

</AuthorizeView>
 <AuthorizeView>
    <NotAuthorized>
        <MudContainer Class="my-10">

            <div style="position: relative; display: inline-block;">
                <MudImage Src="images/banner1.png" Alt="Swedish Farm House" Elevation="15" Class="rounded-lg mt-3" Style="width:100%" />
                <div Class="rounded-lg mt-3" style="position: absolute; top: 0; left: 0; width: 100%; height: 98%; background-color: rgba(50, 50, 50, 0.6);"></div>
                <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:100px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:350px;font-size:35px;color:white;">Order Now</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Md" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:75px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:250px;font-size:25px;color:white;">Order Now</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:50px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:150px;font-size:15px;color:white;">Order Now</MudButton>
                    </div>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudText Class="mt-3" style="width:90%;position: absolute; top: 35%; left: 50%; transform: translate(-50%, -50%); color: white;font-size:30px;font-weight: bold;">
                        Bringing Your Favourite
                        <br />Dishes Home
                    </MudText>
                    <div Class="rounded-lg mt-3" style="position: absolute; bottom: 10%; right: 10%; ">
                        <MudButton Variant="Variant.Outlined" Color="Color.Inherit" Href="/restaurants" Style="width:150px;font-size:15px;color:white;">Order Now</MudButton>
                    </div>


                </MudHidden>


            </div>
        </MudContainer>
    </NotAuthorized>
    
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private AvailabilityUpdateDTO model = new AvailabilityUpdateDTO();

    private ClaimsPrincipal user;

    bool workerAvailability;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.IsInRole("Worker"))
        {
            model.Availability = await ProfileService.GetWorkerAvailability();
        }
    }

    private async Task SetAvailability()
    {
        await LogToBrowserConsole($"BeforeUpdate: {model.Availability}");
        model.Availability = !model.Availability;
        await LogToBrowserConsole($"New: {model.Availability}");

        var result = await this.ProfileService.UpdateWorkerAvailability(model);

        if (result.Succeeded)
        {
            workerAvailability = await ProfileService.GetWorkerAvailability();
            await LogToBrowserConsole($"AfterUpdate: {workerAvailability}");
            StateHasChanged();
        }
    }
    private async Task LogToBrowserConsole(string message) => await JSRuntime.InvokeVoidAsync("console.log", message);


}
