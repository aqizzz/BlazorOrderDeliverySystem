@using MudBlazor
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Client.Pages.Customer
@using OrderDeliverySystem.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Infrastructure.Services.Cart
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation

@rendermode InteractiveServer

<MudHidden Class="my-10" Breakpoint="Breakpoint.MdAndUp" Invert="true">
    <AuthorizeView Roles="Admin,Merchant,Worker">
        <Authorized>
            <MudLink Href="/"><MudImage Src="images/logo.png" Width="120" Height="80" Alt="Swedish Farm House" Href="/dashboard" Class="rounded-lg m-4" /></MudLink>
            <MudSpacer />
            <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Log Out" OnClick="LogOut" />
        </Authorized>
        <NotAuthorized>
            <MudLink Href="/"><MudImage Src="images/logo.png" Width="120" Height="80" Alt="Swedish Farm House" Href="/" Class="rounded-lg m-4" /></MudLink>
            <MudSpacer />
        </NotAuthorized>

    </AuthorizeView>



    <AuthorizeView Roles="Customer">
        <Authorized>
            <MudButtonGroup Color="Color.Dark" Variant="Variant.Text">
                <MudButton Href="/restaurants">Restaurants</MudButton>
                <MudButton Href="/about-us">About Us</MudButton>
                <MudButton Href="/contact">Contact</MudButton>
                <MudButton Href="/my-orders">My Orders</MudButton>
            </MudButtonGroup>
            <MudSpacer />
            <div style="position: relative; display: inline-block;">
                <MudIconButton OnClick="OnExpandCartClick" Icon="@Icons.Material.Filled.AddShoppingCart" Style="color: rgba(168, 0, 0, 1);" />
                <span class="cart-quantity">@totalCartQuantity</span>
            </div>

            <style>
                .cart-quantity {
                    position: absolute;
                    top: -5px;
                    right: 14px;
                    background-color: red;
                    color: white;
                    border-radius: 50%;
                    padding: 3px 6px;
                    font-size: 12px;
                    line-height: 1;
                }
            </style>

            <MudIconButton Href="/customer-profile" Icon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" />
            <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Log Out" OnClick="LogOut" />
        </Authorized>

    </AuthorizeView>

    <AuthorizeView Roles="Customer,Admin,Merchant,Worker">
        <NotAuthorized>
            <MudButtonGroup Color="Color.Dark" Variant="Variant.Text">
                <MudButton Href="/restaurants">Restaurants</MudButton>
                <MudButton Href="/about-us">About Us</MudButton>
                <MudButton Href="/contact">Contact</MudButton>
                <MudButton Href="/register">Sign Up</MudButton>
            </MudButtonGroup>
            <MudSpacer />
            <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Login" Href="/login" />
        </NotAuthorized>
    </AuthorizeView>

</MudHidden>

<MudCollapse Expanded="_cartExpanded">
    @if (_cartExpanded)
    {
        <CartCollapse OnClose="CloseCart" />
    }
</MudCollapse>




@code {

    ///bool isCustomer = false;
    //string _role = "Admin";
    //string _role = "Merchant";
    //string _role = "Guest";
    //string _role = "Customer";
    // string _role = "Worker";


    @*
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
        isMerchant = user.IsInRole("Merchant");
        isDeliveryWorker = user.IsInRole("DeliveryWorker");
        isGuest = (!isAdmin || !isCustomer || !isMerchant || !isDeliveryWorker);
    }*@
    [Inject]
    private IAuthService AuthService { get; set; }
    [Inject]
    private ICartService CartService { get; set; }
    bool _cartExpanded = false;
    private int totalCartQuantity = 0;
    protected override async Task OnInitializedAsync()
    {

        // StateHasChanged();
        await base.OnInitializedAsync();
        CartService.OnCartChanged += UpdateCartQuantity;
        await LoadCartQuantity();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    bool _menuExpanded = true;

    private async Task LoadCartQuantity()
    {
        try
        {
            var response = await CartService.GetTotalCartQuantity();
            if (response.IsSuccessStatusCode)
            {
                totalCartQuantity = await response.Content.ReadFromJsonAsync<int>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading cart quantity: " + ex.Message);
        }
    }

    private void UpdateCartQuantity()
    {
        
        _ = LoadCartQuantity();
    }

    private void OnExpandMenuClick()
    {
        _menuExpanded = !_menuExpanded;
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _cartExpanded = false;
        StateHasChanged();
    }


    private void OnExpandCartClick()
    {
        _cartExpanded = !_cartExpanded;
    }

    private void CloseCart()
    {
        _cartExpanded = false;
    }

    public async Task LogOut()
    {
        if (AuthService != null)
        {
            await AuthService.Logout();
            Navigation.NavigateTo("/", forceLoad: true);
            StateHasChanged();
        }
        NavigationManager.NavigateTo("/");
    }
    public async Task LogIn()
    {
      
        NavigationManager.NavigateTo("/login");
        
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        CartService.OnCartChanged -= UpdateCartQuantity;
    }

    

}
