@inherits LayoutComponentBase
@*@inject AuthenticationStateProvider AuthenticationStateProvider*@


<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>


<MudLayout>
    <MudAppBar Height="Auto" Class="p-3 bg-white">
        <NavMenu Role="@_role" />
    </MudAppBar>
    @if (_role != "Customer" ||  _role != "Guest")
    {
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Style="min-height:700px;">
            <MudContainer Class="my-10" >

                <LeftNavBar />

            </MudContainer>
        
        </MudDrawer>
        <MudMainContent Class="mt-1" Style="min-height:700px;">
            @Body
        </MudMainContent>
       
    }
    else
    {
        <MudMainContent Class="mt-1" Style="min-height:700px;">

            <MudContainer Class="my-10">

                @Body

            </MudContainer>
         
           
        </MudMainContent>


    }
    
    <MudAppBar Bottom="true" Class="bg-light p-5" Style="height:250px;" Fixed="false">
        <Footer />
    </MudAppBar>
    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    
</MudLayout>

@code {
  
    //string _role = "Guest";
    //string _role = "Customer";
    //string _role = "Admin";
    string _role = "Merchant";
    //string _role = "DeliveryWorker";

   @* private bool isAdminOrManager;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // 检查用户是否拥有 Admin 或 Manager 角色
        isAdminOrManager = user.IsInRole("Admin") || user.IsInRole("Manager");
    }*@
 

    bool _drawerOpen = true;
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

}
