
@using OrderDeliverySystem.Client.Infrastructure
@using OrderDeliverySystem.Client.Infrastructure.Services.Cart
@using OrderDeliverySystem.Share.DTOs.CartDTO
@using OrderDeliverySystem.Client.Infrastructure.Extensions;
@using MudBlazor
@using System.Net.Http.Json
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared
@inject HttpClient httpClient
@inject TokenHelper tokenHelper
@inject ICartService CartService
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer


    <MudContainer>
        <MudText Typo="Typo.h6" Style="color: rgba(112, 0, 0, 1);">Classic Breakfast Dishes</MudText>
    @foreach (var item in Items)
        {       
        <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
        <MudItem xs="2">
        <MudAvatar Image="/images/fries.png" Size="Size.Medium" Class="mr-2" />
        </MudItem>
        <MudItem xs="7">
        <MudText Typo="Typo.subtitle1">@item.ItemName
        </MudText>
        <MudText Typo="Typo.body2">@item.ItemDescription</MudText>
        <MudText Typo="Typo.body2">@item.ItemPrice</MudText>
        </MudItem>
        <MudItem xs="3" Class="d-flex align-items-center justify-center">
        <MudButton Variant="Variant.Filled" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(item.ItemId, 1)">+</MudButton>
        </MudItem>
        </MudGrid>
        </MudPaper>

        <MudDivider Class="mb-4" />
    }
    </MudContainer>



@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private ClaimsPrincipal user;

    [Parameter]
    public int merchantUserId { get; set; }

    [Inject]
    private IAuthService AuthService { get; set; }



    protected override async Task OnInitializedAsync()
    {
        CartService.OnCartChanged += UpdateCartQuantity;
        await LoadMenuItems();
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private int customerId = 3;
    private int merchantId;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ViewItemDTO selectedItem1 = null;
    private HashSet<ViewItemDTO> selectedItems = new HashSet<ViewItemDTO>();

    private List<ViewItemDTO> Items = new List<ViewItemDTO>();
    private List<string> types = new List<string>();
    private bool isLoading = true;

    private async Task LoadCartQuantity()
    {
        try
        {
            var response = await CartService.GetTotalCartQuantity();
            if (response.IsSuccessStatusCode)
            {
                await response.Content.ReadFromJsonAsync<int>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading cart quantity: " + ex.Message);
        }
    }

    private void UpdateCartQuantity()
    {
        _ = LoadCartQuantity(); // Refresh cart quantity when cart changes
    }

    private async Task LoadMenuItems()
    {
        try
        {
            if (merchantUserId > 0)
            {
                var httpClient = HttpClientFactory.CreateClient("API");
          
                var response = await httpClient.GetFromJsonAsync<List<ViewItemDTO>>($"api/items/merchant/{merchantUserId}");

                if (response != null)
                {
                    Items = response;
                }
            }
          

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool FilterFunc1(ViewItemDTO item) => FilterFunc(item, searchString1);

    private bool FilterFunc(ViewItemDTO item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.ItemPrice}".Contains(searchString))
            return true;
        return false;
    }



    public async Task AddToCart(int itemId, int quantity)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");


            var cartItemDto = new List<AddUpdateCartItemsRequestDTO>
            {
                new AddUpdateCartItemsRequestDTO(itemId, quantity)
            };


            Console.WriteLine($"Adding item {itemId} with quantity {quantity} for customer {customerId}");

            await tokenHelper.ConfigureHttpClientAuthorization(httpClient);

            var response = await httpClient.PostAsJsonAsync($"api/cart/addCart", cartItemDto);


            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Item {itemId} added to cart successfully.");
                CartService.NotifyCartChanged();
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add item {itemId} to cart. Status Code: {response.StatusCode}, Message: {errorMsg}");
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error adding item to cart: {ex.Message}");
        }

    }
    public void Dispose()
    {
        CartService.OnCartChanged -= UpdateCartQuantity; 
    }

}

