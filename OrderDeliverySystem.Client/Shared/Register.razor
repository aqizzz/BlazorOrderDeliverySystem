@page "/register"
@using System.ComponentModel.DataAnnotations
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<MudContainer Class="my-10">
 
<div class="container d-flex flex-column align-items-center min-vh-100 mt-20">
<h3>Register</h3>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass" role="alert">
        @message
    </div>
}

<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit" FormName="registerForm">
    <ErrorsList ShowErrors="ShowErrors" Errors="Errors" />
    <DataAnnotationsValidator />

    <MudField Underline="false">
                <MudTextField id="email" @bind-Value="user.Email" Label="Email" For="@(() => user.Email)" Variant="Variant.Outlined" />
    </MudField>

    <MudField Underline="false">
                <MudTextField id="Password" @bind-Value="user.Password" Label="Password" For="@(() => user.Password)" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Buttonclick" AdornmentAriaLabel="Show Password" />
    </MudField>

    <MudField Underline="false">
                <MudTextField id="confirmPassword" @bind-Value="user.ConfirmPassword" Label="Confirm Password" For="@(() => user.ConfirmPassword)" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Buttonclick" AdornmentAriaLabel="Show Password" />
    </MudField>

    <div style="display: flex; justify-content: center;" class="mt-6">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="Class.object-center"> Register </MudButton>
    </div>


</EditForm>

<p class="text-center mt-4">Have an account? <a class="text-decoration-underline" href="/login">Log In</a></p>
</div>
</MudContainer>

@code {
    // Model for user registration
    private readonly CustomerRegisterDTO user = new CustomerRegisterDTO();

    public bool ShowErrors { get; set; } = false;

    public string Errors { get; set; } = string.Empty;

    private string message { get; set; } = string.Empty;
    private string alertClass { get; set; } = string.Empty;
    private bool showAlert { get; set; } = false;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task HandleValidSubmit()
    {

        var result = await this.AuthService.Register(this.user);

        if (result.Succeeded)
        {
            this.ShowErrors = false;

            this.message = "You have successfully registered.\n Please login.";
            this.alertClass = "alert-success";
            this.showAlert = true;

            // Force UI update
            await InvokeAsync(StateHasChanged);

            // Wait for 2 seconds to show success message
            await Task.Delay(2000);

            this.NavigationManager.NavigateTo("/login");
        }
        else
        {
            // Registration failed
            this.Errors = result.Error;
            this.ShowErrors = true;
        }

        // Force UI update to show message
        await InvokeAsync(StateHasChanged);
    }

    void Buttonclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}