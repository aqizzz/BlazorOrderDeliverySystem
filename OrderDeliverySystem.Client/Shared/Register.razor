@page "/register"
@using System.ComponentModel.DataAnnotations
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<MudContainer Class="my-10">
   

<div class="container d-flex flex-column align-items-center justify-content-center min-vh-100">
<h3>Register</h3>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass" role="alert">
        @message
    </div>
}

<EditForm Model="@user" OnValidSubmit="@HandleValidSubmit" FormName="registerForm">
    <ErrorsList ShowErrors="ShowErrors" Errors="Errors" />
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="email">Email: </label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" type="email" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password: </label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" autocomplete="new-password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password: </label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword"  class="form-control" type="password" autocomplete="new-password" />
        <ValidationMessage For="@(() => user.ConfirmPassword)" />
    </div>
        <div class="form-group text-center">
        <button type="submit" class="btn btn-danger btn-block mt-3"> Register </button>
    </div>
</EditForm>

<p class="text-center mt-4">Have an account? <a href="/login">Log In</a></p>

</div>

</MudContainer>
@code {
    // Model for user registration
    private readonly CustomerRegisterDTO user = new CustomerRegisterDTO();

    public bool ShowErrors { get; set; } = false;

    public IEnumerable<string> Errors { get; set; } = new List<string>();

    private string message { get; set; } = string.Empty;
    private string alertClass { get; set; } = string.Empty;
    private bool showAlert { get; set; } = false;

    private async Task HandleValidSubmit()
    {

        var result = await this.AuthService.Register(this.user);

        if (result.Succeeded)
        {
            this.ShowErrors = false;

            this.message = "You have successfully registered.\n Please login.";
            this.alertClass = "alert-success";
            this.showAlert = true;

            // Force UI update
            await InvokeAsync(StateHasChanged);

            // Wait for 2 seconds to show success message
            await Task.Delay(2000);

            this.NavigationManager.NavigateTo("/login");
        }
        else
        {
            // Registration failed
            this.Errors = result.Errors;
            this.ShowErrors = true;
        }

        // Force UI update to show message
        await InvokeAsync(StateHasChanged);
    }
}