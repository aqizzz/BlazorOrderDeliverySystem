

@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Infrastructure.Services.Review
@using OrderDeliverySystem.Share.DTOs.ReviewDTO



<div Style="width: 400px;">
    <EditForm Model="@newReview" OnValidSubmit="CreateReview">
    <MudDivider Class="mb-3" Style="border-color:rgba(112, 0, 0, 1);" />
    <ErrorsList ShowErrors="@showErrors" Errors="@errors" />
    <MudText Typo="Typo.subtitle1">Order Id : @OrderId</MudText>
    <MudText Class="my-3" Typo="Typo.body1">Please rate and leave your review here</MudText>
    <MudRating Class="my-2" @bind-SelectedValue="newReview.Rating" Size="Size.Medium" Label="Rating" Required="true" />
        <MudTextField Variant="Variant.Outlined" @bind-Value="newReview.Comment" Label="Comment" Lines="5" Required="true" />
        <MudDivider Class="my-3" Style="border-color:rgba(112, 0, 0, 1);" />
        <div class="my-3 d-flex justify-content-between align-items-center">
        <MudButton Class="rounded-pill" Style="width:40%;color:white; background-color: rgba(112, 0, 0, 1);" OnClick="@(() => ShowSubmitDialog())">Submit</MudButton>
        <MudButton Class="rounded-pill" Style="width:40%; background-color:lightgrey; color: rgba(112, 0, 0, 1);" OnClick="ResetForm">Reset</MudButton>
    </div>
    </EditForm>
  
</div>

@if (showSubmitDialog)
{
    <div class="custom-dialog-backdrop">
        <div class="custom-dialog">
            <MudText Typo="Typo.h6">Submit Review Confirmation</MudText>
            <MudText Typo="Typo.body1">Are you sure you want to submit this review?</MudText>
            <MudButton OnClick="@(async () => await CreateReview())" Color="Color.Primary" Class="mt-2">Yes</MudButton>
            <MudButton OnClick="CancelSubmit" Color="Color.Default" Class="mt-2">No</MudButton>
        </div>
    </div>
}

@code {
  
    [Parameter]
    public int OrderId { get; set; }

    private CreateReviewRequestDTO newReview = new CreateReviewRequestDTO
        {
            OrderId = 0, // Hardcoded OrderId
            Rating = 5,
            Comment = ""
        };

    private bool showSubmitDialog = false;
    private bool showErrors = false;
    private string errors = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        

        if (!user.Identity.IsAuthenticated || !user.IsInRole("Customer"))
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void ShowSubmitDialog()
    {
        showSubmitDialog = true;
    }

    private async Task CreateReview()
    {
        
        try
        {
            newReview.OrderId = OrderId;
            var result = await ReviewService.AddReview(newReview);

            if (result.Succeeded)
            {
                Snackbar.Add("Review submitted successfully!", Severity.Success);
                showErrors = false;
                NavigationManager.NavigateTo("/my-orders"); // Redirect after success
            }
            else
            {
                errors = result.Error;
                showErrors = true;
                Snackbar.Add("Error submitting review", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errors = $"An error occurred: {ex.Message}";
            showErrors = true;
            Snackbar.Add("Error occurred during review submission.", Severity.Error);
        }
        finally
        {
            showSubmitDialog = false;
        }
    }

    private void CancelSubmit()
    {
        showSubmitDialog = false;
       
    }

    private void ResetForm()
    {
        newReview = new CreateReviewRequestDTO
            {
                OrderId = 0, // Hardcoded OrderId
                Rating = 5,
                Comment = ""
            };
    }
}

<style>
    .custom-dialog-backdrop {
        position: absolute;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-dialog {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        max-width: 500px;
        width: 100%;
    }
</style>
