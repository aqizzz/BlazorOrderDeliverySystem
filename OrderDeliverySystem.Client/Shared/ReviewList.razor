@using OrderDeliverySystem.Client.Infrastructure.Services.Review
@using OrderDeliverySystem.Share.DTOs.ReviewDTO
@using MudBlazor
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Review List</h3>

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (reviews != null && reviews.Count > 0)
{
    @foreach (var review in reviews)
    {
        <div class="review-card">
            <div class="review-header">
                @for (var i = 0; i < review.Rating; i++)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" />
                }
            </div>
            <div class="review-content">
                <div class="review-date">
                    @review.CreatedAt.ToString("MMMM dd, yyyy")
                </div>
                <strong>Comment:</strong> @review.Comment <br />
                @if (!string.IsNullOrEmpty(review.Reply))
                {
                    <strong>Merchant Reply:</strong> @review.Reply <br />
                }
                @if (review.ReplyCreatedAt.HasValue)
                {
                    <div class="reply-date">
                        <strong>Reply Date:</strong> @review.ReplyCreatedAt.Value.ToString("MMMM dd, yyyy")
                    </div>
                }
            </div>
            <hr />
        </div>
    }
}
else
{
    <MudText Typo="Typo.subtitle1" Color="Color.Error">No reviews found for this merchant.</MudText>
}

@code {
    private List<GetReviewResponseDTO> reviews = new();
    private bool isLoading = true;

    [Parameter]
    public int merchantUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Customer"))
            {
                isLoading = true;
                await LoadReviews();
                isLoading = false;
            }
            else
            {
                Console.WriteLine("User is not in the Customer role.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadReviews()
    {
        try
        {
            reviews = await ReviewService.CustomerGetReviews(merchantUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
        }
    }
}

<style>
    .review-card {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .review-header {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .review-content {
        font-size: 16px;
        color: #444;
    }

    .review-date, .reply-date {
        font-size: 12px;
        color: #888; /* Lighter gray color */
        margin-top: 5px;
        margin-bottom: 10px;
    }

    hr {
        margin-top: 20px;
        border: 0;
        border-top: 1px solid #ddd;
    }
</style>
