@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderService Orderservice
@inject NavigationManager Navigation
@rendermode InteractiveServer


<MudTable Items="@orders" FixedHeader=true Hover="true" Height="400px"  Loading="@isLoading" LoadingProgressColor="Color.Error">
   
    <HeaderContent>
        <MudTh Class="text-center">OrderId</MudTh>
        <MudTh Class="text-center">OrderTime</MudTh>
        <MudTh Class="text-center">Item Name</MudTh>
        <MudTh Class="text-center">Item Quantity</MudTh>
        <MudTh Class="text-center">TotalAmount</MudTh>
        <MudTh Class="text-center">Actions</MudTh>

    </HeaderContent>

    <RowTemplate>

        <MudTd Class="text-center" DataLabel="OrderId">@context.OrderId</MudTd>
        <MudTd Class="text-center" DataLabel="OrderTime">@context.CreatedAt.ToString("MM/dd/yyyy hh:mm:ss")</MudTd>
        <MudTd Class="text-center" DataLabel="ItemName">
            @foreach (var orderItem in @context.OrderItems)
            {
                <MudText>@orderItem.ItemName</MudText>
                <MudDivider Class="border-2" />
            }
        </MudTd>

        <MudTd Class="text-center" DataLabel="Quantity">
            @foreach (var orderItem in @context.OrderItems)
            {
                <MudText>@orderItem.Quantity</MudText>
                <MudDivider Class="border-2" />
            }

        </MudTd>
        <MudTd Class="text-center" DataLabel="TotalAmount">@context.TotalAmount.ToString("C")</MudTd>
        <MudTd DataLabel="Action" Class="d-flex justify-content-center">
           
            @if (context.Status.Equals("Pending"))
            {
                <MudFab Class="d-inline-block m-1" Variant="Variant.Filled" Label="Approve" Style="color: rgba(168, 0, 0, 1);" OnClick="() => UpdateOrder(context)" />

                <MudFab Class="d-inline-block m-1" Variant="Variant.Filled" Label="Cancel" Color="Color.Default" OnClick="() => CancelOrder(context)" />
            }
            else
            {
                <MudFab Class="d-inline-block m-1" Variant="Variant.Filled" Label="@context.Status" Style="color: rgba(168, 0, 0, 1);" Disabled="true" />
            }

            
        </MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    [Inject]
    private IAuthService AuthService { get; set; }


    [Parameter]
    public int UserId { get; set; }
    [Parameter]
    public bool recent { get; set; }
    [Parameter]
    public string role { get; set; }
    [Parameter]
    public UpdateOrderDTO order { get; set; }

    public bool ShowErrors { get; set; } = false;
    public string Errors { get; set; } = string.Empty;


    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString1 = "";
    private OrderDTO selectedItem1 = null;
    private HashSet<OrderDTO> selectedOrders = new HashSet<OrderDTO>();

    public List<OrderDTO> orders = new List<OrderDTO>();


    // private IEnumerable<ViewItemDTO> Orders = new List<ViewItemDTO>();

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {

            await LoadOrders();


        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }
    }
    private async Task LoadOrders()
    {
        try
        {

            if (role != null)
            {
                var response = await Orderservice.GetOrdersTableByRole(role, recent);
                if (response != null)
                {
                    orders = response;
                }
                else
                {
                    Console.WriteLine($"No order was found");
                }

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateOrder(OrderDTO thisOrder)
    {
        if (thisOrder == null)
        {
            Console.WriteLine("thisOrder is null");
            return; // Early return if thisOrder is null
        }

        // Check if order is initialized
        if (order == null)
        {
            order = new UpdateOrderDTO(); // Initialize if necessary
        }

        // Accessing properties with checks
        if (thisOrder.OrderId != null)
        {
            order.OrderId = thisOrder.OrderId; // Ensure thisOrder is not null before accessing
        }

        if (thisOrder.Status != null)
        {

            order.Status = thisOrder.Status; // Update status


        }

        // Perform the update
        try
        {
            var result=await Orderservice.ApproveOrder(order);
            
            Navigation.NavigateTo("/merchant-orders", forceLoad: true);
            if (result.Succeeded)
            {
                ShowErrors = false;
                StateHasChanged();
                NavigationManager.NavigateTo("/my-orders");

            }
            else
            {
                Errors = result.Error;
                ShowErrors = true;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order: {ex.Message}");
        }

        // Trigger UI update
        StateHasChanged();
    }



    private async Task CancelOrder(OrderDTO thisOrder)
    {
        if (thisOrder == null)
        {
            Console.WriteLine("thisOrder is null");
            return; // Early return if thisOrder is null
        }

        // Check if order is initialized
        if (order == null)
        {
            order = new UpdateOrderDTO(); // Initialize if necessary
        }

        // Accessing properties with checks
        if (thisOrder.OrderId != null)
        {
            order.OrderId = thisOrder.OrderId; // Ensure thisOrder is not null before accessing
        }

         order.Status = "Cancelled"; // Update status
           

        // Perform the update
        try
        {
            await Orderservice.CancelOrder(order);
            Navigation.NavigateTo("/merchant-orders", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating order: {ex.Message}");
        }

        // Trigger UI update
        StateHasChanged();
    }

    private bool FilterFunc1(OrderDTO order) => FilterFunc(order, searchString1);

    private bool FilterFunc(OrderDTO order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.Customer.User.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (order.Customer.User.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        foreach (var address in order.Customer.User.Addresses)
        {
            if (address.FullAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        foreach (var item in order.OrderItems)
        {
            if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        return false;
    }



}