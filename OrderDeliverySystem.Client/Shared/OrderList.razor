
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderService Orderservice
@rendermode InteractiveServer

@*
<MudContainer Class="my-10">
    <h3>ItemList</h3>
    @foreach (var order in recentOrders)
    {
     @order.OrderId
    }
    表格显示部分
    <MudTable Items="@orders" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<OrderDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Orders</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Order ID</MudTh>
            <MudTh>Item ID</MudTh>
            <MudTh>Item Name</MudTh>
            <MudTh>Item Description</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Item Picture</MudTh>
            <MudTh>Available</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="MerchantId">@context.MerchantId</MudTd>
            <MudTd DataLabel="ItemId">@context.ItemId</MudTd>
            <MudTd DataLabel="Name">@context.ItemName</MudTd>
            <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
            <MudTd DataLabel="Price">@context.ItemPrice.ToString("C")</MudTd>
            <MudTd DataLabel="Picture">@context.ItemPic</MudTd>
            <MudTd DataLabel="Available">@context.ItemIsAvailable</MudTd>


            <MudTd DataLabel="Action">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddToCart(context)">
                    Add to Cart
                </MudButton>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>


    <!-- Temporary debugging using foreach loop to display raw data -->
 

    <!-- 交互控件部分 -->
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.ItemName</MudText>
        </div>
    </div>
     
</MudContainer> *@
   
@code {
    [Parameter]
    public string orderType { get; set; }

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private OrderDTO selectedItem1 = null;
    private HashSet<OrderDTO> selectedOrders = new HashSet<OrderDTO>();
    private List<OrderDTO> recentOrders = new();
    private List<OrderDTO> orderHistory = new();

    // private IEnumerable<ViewItemDTO> Orders = new List<ViewItemDTO>();

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int customerId = 2;

        recentOrders = await Orderservice.GetOrdersByRoleAsync("merchant", customerId, true);

    }

  
    private bool FilterFunc1(OrderDTO order) => FilterFunc(order, searchString1);

    private bool FilterFunc(OrderDTO order, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.Customer.User.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (order.Customer.User.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return true;
      
        foreach (var address in order.Customer.User.Addresses)
        {
            if (address.FullAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        foreach (var address in order.Merchant.User.Addresses)
        {
            if (address.FullAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
       
    }
}