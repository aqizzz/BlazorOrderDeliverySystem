@* @page "/ItemList"
@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared.Common
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@rendermode InteractiveServer

<h3>ItemList</h3>

<MudTable Items="@Items" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ViewItemDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Items</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Item Name</MudTh>
        <MudTh>Item Description</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Available</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.ItemName</MudTd>
        <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
        <MudTd DataLabel="Price">@context.ItemPrice.ToString("C")</MudTd>
        <MudTd DataLabel="Available">@context.ItemIsAvailable</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.ItemName</MudText>
    </div>
</div>


@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ViewItemDTO selectedItem1 = null;
    private HashSet<ViewItemDTO> selectedItems = new HashSet<ViewItemDTO>();

    private IEnumerable<ViewItemDTO> Items = new List<ViewItemDTO>();


    protected override async Task OnInitializedAsync()
    {
        Items = await httpClient.GetFromJsonAsync<List<ViewItemDTO>>("/api/items");
    }

    private bool FilterFunc1(ViewItemDTO item) => FilterFunc(item, searchString1);


    private bool FilterFunc(ViewItemDTO item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.ItemPrice}".Contains(searchString))
            return true;
        return false;
    }
} *@