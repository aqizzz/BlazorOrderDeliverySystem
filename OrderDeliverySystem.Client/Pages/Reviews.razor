@page "/reviewlist"

@using OrderDeliverySystem.Client.Infrastructure.Services.Review
@using OrderDeliverySystem.Share.DTOs.ReviewDTO
@using MudBlazor
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer Class="my-10">
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">All Reviews</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (reviews != null && reviews.Count > 0)
    {
        <MudTable Items="@reviews" Striped="true" Bordered="true">
            <HeaderContent>
                <MudTh>Review ID</MudTh>
                <MudTh>Order ID</MudTh>
                <MudTh>Customer ID</MudTh>
                <MudTh>Rating</MudTh>
                <MudTh>Comment</MudTh>
                <MudTh>Reply</MudTh>
                <MudTh>Created At</MudTh>
                <MudTh>Reply Created At</MudTh>
                <MudTh>Action</MudTh> <!-- New column for delete action -->
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Review ID">@context.ReviewId</MudTd>
                <MudTd DataLabel="Order ID">@context.OrderId</MudTd>
                <MudTd DataLabel="Customer ID">@context.CustomerId</MudTd>
                <MudTd DataLabel="Rating">@context.Rating</MudTd>
                <MudTd DataLabel="Comment">@context.Comment</MudTd>
                <MudTd DataLabel="Reply">@context.Reply</MudTd>
                <MudTd DataLabel="Created At">@context.CreatedAt.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="Reply Created At">@context.ReplyCreatedAt?.ToString("yyyy-MM-dd")</MudTd>
                <MudTd>
                    <MudButton OnClick="@(() => ShowDeleteDialog(@context.ReviewId))" Color="Color.Error" Variant="Variant.Text">
                        Delete
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error">No reviews found.</MudText>
    }
</MudContainer>

@if (showDeleteDialog)
{
    <div class="custom-dialog-backdrop">
        <div class="custom-dialog">
            <MudText Typo="Typo.h6">Delete Confirmation</MudText>
            <MudText Typo="Typo.body1">Are you sure you want to delete this review?</MudText>
            <MudButton OnClick="@(async () => await DeleteReviewAsync())" Color="Color.Error" Class="mt-2">Yes</MudButton>
            <MudButton OnClick="CancelDelete" Color="Color.Secondary" Class="mt-2">No</MudButton>
        </div>
    </div>
}

@code {
    private List<GetReviewResponseDTO> reviews = new();
    private bool isLoading = true;
    private bool showDeleteDialog = false;
    private int selectedReviewId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Admin"))
            {
                isLoading = true;
                await LoadReviewsAsync();
                isLoading = false;
            }
            else
            {
                Console.WriteLine("User is not in the Admin role.");
                NavigationManager.NavigateTo("/not-authorized");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadReviewsAsync()
    {
        try
        {
            reviews = await ReviewService.AdminGetReviews();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
        }
    }

    private void ShowDeleteDialog(int reviewId)
    {
        selectedReviewId = reviewId;
        showDeleteDialog = true;
    }

    private async Task DeleteReviewAsync()
    {
        try
        {
            var response = await ReviewService.DeleteReview(selectedReviewId);
            if (response.IsSuccessStatusCode)
            {
                reviews.RemoveAll(r => r.ReviewId == selectedReviewId); // Remove from list
                Console.WriteLine("Review deleted successfully.");
            }
            else
            {
                Console.WriteLine("Failed to delete review.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting review: {ex.Message}");
        }
        finally
        {
            showDeleteDialog = false;
        }
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
    }
}

<style>
    .custom-dialog-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-dialog {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        max-width: 500px;
        width: 100%;
    }
</style>
