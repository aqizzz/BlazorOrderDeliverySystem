@page "/password"
@*@attribute [Authorize]*@
@using OrderDeliverySystem.Share.DTOs
@using Microsoft.AspNetCore.Authorization;
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared.Common
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto


<div class="container d-flex flex-column align-items-center justify-content-center min-vh-100">

    @* Display message to user if it's not empty *@
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @alertClass" role="alert">
            @message
        </div>
    }
    <h3>Change Password</h3>

    <EditForm Model="model" OnValidSubmit="SubmitAsync">

        <ErrorsList ShowErrors="ShowErrors" Errors="Errors" />
        <DataAnnotationsValidator />

        <div class="form-group row">
            <label class="col-form-label">Current password</label>
            <div >
                <InputText @bind-Value="model.Password" class="form-control" type="password" />
            </div>
            
        </div>
        <ValidationMessage For="@(() => model.Password)" />
        <div class="form-group row mt-6">
            <label class="col-form-label">New password</label>
            <div >
                <InputText @bind-Value="model.NewPassword" class="form-control" type="password" />
            </div>
            
        </div>
        <ValidationMessage For="@(() => model.NewPassword)" />
        <div class="form-group row mt-6">
            <label class="col-form-label">Confirm new password</label>
            <div>
                <InputText @bind-Value="model.ConfirmNewPassword" class="form-control" type="password" />
            </div>
            
        </div>
        <ValidationMessage For="@(() => model.ConfirmNewPassword)" />
        <div class="form-group text-center">
            <button type="submit" class="btn btn-danger mt-3"> Save changes </button>
        </div>
    </EditForm>

</div>

@code {
    private readonly ChangePasswordRequestDto model = new ChangePasswordRequestDto();

    public bool ShowErrors { get; set; } = false;

    public IEnumerable<string> Errors { get; set; } = new List<string>();

    private string message { get; set; } = string.Empty;
    private string alertClass { get; set; } = string.Empty;
    private bool showAlert { get; set; } = false;

    private async Task SubmitAsync()
    {
        var result = await this.AuthService.ChangePassword(this.model);

        if (result.Succeeded)
        {

            this.ShowErrors = false;

            this.message = "Your password has been changed successfully.";
            this.alertClass = "alert-success";
            this.showAlert = true;

            // Force UI update
            await InvokeAsync(StateHasChanged);

            // Wait for 2 seconds to show success message
            await Task.Delay(2000);

            this.NavigationManager.NavigateTo("/login");
        }
        else
        {
            this.Errors = result.Errors;
            this.ShowErrors = true;
        }
    }
}
}