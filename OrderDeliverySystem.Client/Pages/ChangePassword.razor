@page "/password"
@*@attribute [Authorize]*@
@using OrderDeliverySystem.Share.DTOs
@using Microsoft.AspNetCore.Authorization;
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared.Common
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto
@using MudBlazor
@using System.Security.Claims

@* Display message to user if it's not empty *@
@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="Severity.Success"> @message</MudAlert>
               
}

<MudText Class="py-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">Change Password</MudText>
<EditForm Model="@passwordModel" OnValidSubmit="SubmitAsync">
    
    <DataAnnotationsValidator />
    <MudGrid>

        <MudItem xs="10">
            <ErrorsList ShowErrors="@ShowErrors" Errors="@Errors" />
        </MudItem>
        <MudItem xs="2">
        </MudItem>

        <MudItem xs="10">
            <MudField Underline="false">
                <MudTextField id="Password" Label="Current password:" @bind-Value="passwordModel.Password" For="@(() => passwordModel.Password)" Variant="Variant.Filled" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Buttonclick" AdornmentAriaLabel="Show Password" />
            </MudField>
        </MudItem>
        <MudItem xs="2">
        </MudItem>

        <MudItem xs="10">
            <MudField Underline="false">
                <MudTextField id="newPassword" Label="New password:" @bind-Value="passwordModel.NewPassword" For="@(() => passwordModel.NewPassword)" Variant="Variant.Filled" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Buttonclick" AdornmentAriaLabel="Show Password" />
            </MudField>
        </MudItem>
        <MudItem xs="2">
        </MudItem>


        <MudItem xs="10">
            <MudField Underline="false">
                <MudTextField id="confirmPassword" Label="Confirm new password:" @bind-Value="passwordModel.ConfirmNewPassword" For="@(() => passwordModel.ConfirmNewPassword)" Variant="Variant.Filled" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Buttonclick" AdornmentAriaLabel="Show Password" />
            </MudField>
        </MudItem>
        <MudItem xs="2">
        </MudItem>
         <MudItem xs="12" Class="d-flex justify-content-start">
            <MudButton Class="m-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" >Submit Password</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>
    

@code {
    private readonly ChangePasswordRequestDto model = new ChangePasswordRequestDto();

    public bool ShowErrors { get; set; } = false;

    public IEnumerable<string> Errors { get; set; } = new List<string>();

    private string message { get; set; } = string.Empty;
    private string alertClass { get; set; } = string.Empty;
    private bool showAlert { get; set; } = false;

    private async Task SubmitAsync()
    {
        var result = await this.AuthService.ChangePassword(this.model);

        if (result.Succeeded)
        {

            this.ShowErrors = false;

            this.message = "Your password has been changed successfully.";
            this.alertClass = "alert-success";
            this.showAlert = true;

            // Force UI update
            await InvokeAsync(StateHasChanged);

            // Wait for 2 seconds to show success message
            await Task.Delay(2000);

            this.NavigationManager.NavigateTo("/login");
        }
        else
        {
            this.Errors = result.Errors;
            this.ShowErrors = true;
        }
    }
}
