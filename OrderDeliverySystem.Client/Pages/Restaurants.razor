@page "/restaurants"
@using MudBlazor
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.DTOs
@using System.Timers
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<MudContainer Class="my-10" MaxWidth="MaxWidth.ExtraLarge" >

    <MudText Class="pt-4" Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Restaurants</MudText>
    <MudText Align="Align.Center">Some long pricing text should go here maybe? who knows what text you would want here, i guess i cant fill it in for you.</MudText>

    <MudGrid Class="mt-2">
        <MudItem xs="12" sm="12" md="12" Class="d-flex justify-content-center align-items-end mb-2">
            <div class="w-50 mb-4">
                <MudTextField @bind-Value="searchText" @onchange="@Change" Placeholder="Search Merchant by Name..." Adornment="Adornment.End"
                              AdornmentColor="Color.Secondary" AdornmentIcon="@Icons.Material.Filled.Search"
                              Immediate="true" />
            </div>
        </MudItem>
        <MudDivider Style="color:rgba(112, 0, 0, 1);border-color:rgba(112, 0, 0, 1);border-width:3px;" />
                @foreach (var merchant in filteredMerchants)
                {
                <MudItem xs="12" sm="6" md="4" lg="3" >

                    <RestaurantCard merchantObject="@merchant" />
                </MudItem> 
                }


    </MudGrid>

</MudContainer>


@code {


    private IEnumerable<MerchantProfileDTO> merchants = new List<MerchantProfileDTO>();
    private IEnumerable<MerchantProfileDTO> filteredMerchants => string.IsNullOrWhiteSpace(searchText)
        ? merchants
        : merchants.Where(item => item.BusinessName.Contains(searchText ?? string.Empty, StringComparison.CurrentCultureIgnoreCase));

    private bool isLoading = true;

    private string searchText = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadMerchantItems();

    }

    private async Task LoadMerchantItems()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetFromJsonAsync<List<MerchantProfileDTO>>("api/profile/merchants");

            if (response != null)
            {
                merchants = response;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading merchants: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public async Task Change(ChangeEventArgs args)
    {
        var searchText = args.Value;
    }

}
