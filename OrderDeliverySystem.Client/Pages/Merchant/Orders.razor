@page "/merchant-orders"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderService Orderservice
@rendermode InteractiveServer


<MudContainer Class="my-10">
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My Orders</MudText>
   
    <MudTabs TabHeaderClass="d-flex justify-content-end " Elevation="1" Rounded="true" PanelClass="pa-6" ActiveTabClass="border-solid border-1 mud-border-primary">

        <MudTabPanel>
            
            <ChildContent>
                <AuthorizeView Roles="Merchant">
                    <Authorized>
                        <OrderList role="merchant" recent="true" />
                    </Authorized>
                </AuthorizeView>
            </ChildContent>
            <TabContent>
                Recent Orders
            </TabContent>
        </MudTabPanel>
        <MudTabPanel>
            <ChildContent>
                <AuthorizeView Roles="Merchant">
                    <Authorized>
                        <OrderList role="merchant" recent="false" />
                    </Authorized>
                </AuthorizeView>
            </ChildContent>

            <TabContent>
                Order History
            </TabContent>
        </MudTabPanel>
    </MudTabs>
  
</MudContainer>

@code {
    [Inject]
    private IAuthService AuthService { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
      
    }


}
