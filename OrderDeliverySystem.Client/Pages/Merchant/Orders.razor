@page "/merchant-orders"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Shared
 @using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<h3>Menus</h3>


<MudContainer Class="my-10">
    <h3>ItemList</h3>
    @foreach (var order in recentOrders)
    {
        @order.OrderId
    }
    表格显示部分
    @*<MudTable Orders="@Orders" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"  @bind-SelectedItem="selectedItem1">
    <MudTable Orders="@Orders" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ViewItemDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Orders</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Merchant ID</MudTh>
            <MudTh>Item ID</MudTh>
            <MudTh>Item Name</MudTh>
            <MudTh>Item Description</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Item Picture</MudTh>
            <MudTh>Available</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="MerchantId">@context.MerchantId</MudTd>
            <MudTd DataLabel="ItemId">@context.ItemId</MudTd>
            <MudTd DataLabel="Name">@context.ItemName</MudTd>
            <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
            <MudTd DataLabel="Price">@context.ItemPrice.ToString("C")</MudTd>
            <MudTd DataLabel="Picture">@context.ItemPic</MudTd>
            <MudTd DataLabel="Available">@context.ItemIsAvailable</MudTd>


            <MudTd DataLabel="Action">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddToCart(context)">
                    Add to Cart
                </MudButton>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>



    <!-- Temporary debugging using foreach loop to display raw data -->
    <div>
        <h3>Raw Data (for debugging)</h3>
        <ul>
            @foreach (var item in Orders)
            {
                <li>@item.MerchantId - @item.ItemId - @item.ItemName - @item.ItemDescription - @item.ItemPrice - @item.ItemPic - @item.ItemIsAvailable</li>
            }
        </ul>
    </div>

    <!-- 交互控件部分 -->
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.ItemName</MudText>
        </div>
    </div>*@

    </MudContainer> 

@code {
    private int merchantId = 2;

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ViewItemDTO selectedItem1 = null;
    private HashSet<ViewItemDTO> selectedOrders = new HashSet<ViewItemDTO>();
    private List<OrderDTO> recentOrders = new();
    private List<OrderDTO> orderHistory = new();

    // private IEnumerable<ViewItemDTO> Orders = new List<ViewItemDTO>();

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int customerId = 1;

    }

    private async Task LoadOrders()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            var recent = true;
            var recnet_1 = false;

            var response1 = await httpClient.GetFromJsonAsync<List<OrderDTO>>($"api/orders/merchant/{merchantId}?recent={recent.ToString().ToLower()}");
            var response2 = await httpClient.GetFromJsonAsync<List<OrderDTO>>($"api/orders/merchant/{merchantId}?recent={recnet_1.ToString().ToLower()}");
            if (response1 != null)
            {
                recentOrders = response1;
              
            }
            if (response2 != null)
            {
                orderHistory = response2;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool FilterFunc1(ViewItemDTO item) => FilterFunc(item, searchString1);

    private bool FilterFunc(ViewItemDTO item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.ItemPrice}".Contains(searchString))
            return true;
        return false;
    }


    @*private async Task Edit(OrderDTO item)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            // Assuming you have an API endpoint to add the item to the cart
            var response = await httpClient.PostAsJsonAsync("/api/cart", item);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Item {item.ItemName} added to cart successfully.");
                //  You might want to show a success notification on the UI
            }
            else
            {
                Console.WriteLine($"Failed to add item {item.ItemName} to cart.");
                //  Handle failure (e.g., show an error message)
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding item to cart: {ex.Message}");
        }
    }*@

}
