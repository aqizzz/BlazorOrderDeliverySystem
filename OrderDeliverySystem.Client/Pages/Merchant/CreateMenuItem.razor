<h3>CreateMenuItem</h3>
@page "/createMenuItem"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory

@using MudBlazor
@using System.Net.Http.Json
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data.Models
@* @using OrderDeliverySystem.Share.Data *@


<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Create New Menu Item</MudText>

    <EditForm Model="@newItem" OnValidSubmit="CreateItem">
        <MudTextField @bind-Value="newItem.ItemName" Label="Item Name" Required="true" />
        <MudTextField @bind-Value="newItem.ItemDescription" Label="Description" />
        <MudNumericField @bind-Value="newItem.ItemPrice" Label="Price" Required="true" />
        <MudTextField @bind-Value="newItem.ItemPic" Label="Image URL" />
        <MudSwitch @bind-Checked="newItem.ItemIsAvailable" Label="Available" T="bool" />

        <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateItem">Submit</MudButton>
        <MudButton Type="button" Variant="Variant.Filled" Color="Color.Secondary" >Reset</MudButton>
    </EditForm>

    <MudSnackbarProvider />
</MudPaper>

@code {
    private CreateItemDTO newItem = new CreateItemDTO();
    private int merchantId = 12;

    

    private async Task CreateItem()
    {


        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            // Call API to create item
             // var response = await Http.PostAsJsonAsync($"api/items/merchant/{merchantId}", newItem);
             var response = await Http.PostAsJsonAsync($"https://localhost:7027/api/items", newItem);

            if (response.IsSuccessStatusCode)
            {
                // Show success message
                Snackbar.Add("Item successfully created!", Severity.Success);

                // Optionally reset the form or navigate away
                newItem = new CreateItemDTO();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error creating item: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating item: {ex.Message}", Severity.Error);
        }

    }

}
