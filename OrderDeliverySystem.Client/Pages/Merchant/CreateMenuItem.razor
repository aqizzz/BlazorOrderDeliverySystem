@page "/create-item"

@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ItemService ItemService
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MudBlazor
@using System.Net.Http.Json
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Share.Data
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Extensions
@using OrderDeliverySystem.Client.Infrastructure.Services.Item
@using OrderDeliverySystem.Client.Shared.Common
@rendermode InteractiveServer
<MudContainer Class="my-10 d-flex justify-content-center" MaxWidth="MaxWidth.ExtraLarge" Style="min-height:620px">
        <MudPaper Class="px-16 pt-10 ma-2 " Elevation="3" Width="100%">
<AuthorizeView Roles="Merchant">
    <Authorized>
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h5">Create New Menu Item</MudText>
            <EditForm Model="@newItem" OnValidSubmit="CreateItem" Context="CreateItemForm">
                <ErrorsList ShowErrors="ShowErrors" Errors="Errors" />
                <MudTextField @bind-Value="newItem.ItemName" Label="Item Name" Required="true" />
                <MudTextField @bind-Value="newItem.ItemDescription" Label="Description" />
                <MudNumericField @bind-Value="newItem.ItemPrice" Label="Price" Required="true" />
                <MudTextField @bind-Value="newItem.ItemPic" Label="Image URL" />
                <MudSwitch @bind-Value="newItem.ItemIsAvailable" T="bool" Color="Color.Error">@(newItem.ItemIsAvailable ? "Available" : "Not Available")</MudSwitch>
                <br />
                <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>CreateItem())">Submit</MudButton>
                @* <MudButton Type="button" Variant="Variant.Filled" Color="Color.Secondary" >Reset</MudButton> *@
                <MudButton Type="button" Variant="Variant.Filled"  OnClick="ResetForm">Reset</MudButton>
            </EditForm>
            <MudSnackbarProvider />
        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h5" Color="Color.Error">Unauthorized: You do not have permission to create items.</MudText>
    </NotAuthorized>
</AuthorizeView>
    </MudPaper>
</MudContainer>
@code { 
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private CreateItemDTO newItem = new CreateItemDTO
    {
            ItemId = 0,
            MerchantId = 0,
            ItemName = "",
            ItemDescription = "",
            ItemPrice = 0,
            ItemPic = "",
            ItemIsAvailable = true,   
    };

    private bool isAuthorized = false;
    private string token;
    private ClaimsPrincipal user;

    public bool ShowErrors { get; set; } = false;
    public string Errors { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {   
        var authState = await authenticationState;
        user = authState.User;
        
    }

    private async Task CreateItem()
    {
        var result = await this.ItemService.CreateMenuItem(newItem); // Update customer data

        if (result.Succeeded)
        {
            ShowErrors = false;
            NavigationManager.NavigateTo("/merchant-items", forceLoad:true);
        }
        else
        {
            Errors = result.Error;
            ShowErrors = true;
        }
    }

    private void ResetForm()
    {
        newItem = new CreateItemDTO
            {
                ItemId = 0,
                MerchantId = 0,
                ItemName = "",
                ItemDescription = "",
                ItemPrice = 0,
                ItemPic = "",
                ItemIsAvailable = true,
            };
    }
}
