@page "/merchant-reviews"
@using OrderDeliverySystem.Client.Infrastructure.Services.Review
@using OrderDeliverySystem.Share.DTOs.ReviewDTO
@using MudBlazor
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer Class="my-10">
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My Reviews</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (reviews != null && reviews.Count > 0)
    {
        <MudTable Items="@reviews" Striped="true" Bordered="true">
            <HeaderContent>
         
                <MudTh Style="width:50px">Order ID</MudTh>
                <MudTh Style="width:50px">Customer ID</MudTh>
                <MudTh Style="width:50px">Rating</MudTh>
                <MudTh Style="width:150px">Comment</MudTh>
                <MudTh Style="width:150px">Reply</MudTh>
                <MudTh Style="width:100px">Review At</MudTh>
                <MudTh Style="width:100px">Reply At</MudTh>
                <MudTh Style="width:50px">Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Order ID">@context.OrderId</MudTd>
                <MudTd DataLabel="Customer ID">@context.CustomerId</MudTd>
                <MudTd DataLabel="Rating">@context.Rating</MudTd>
                <MudTd DataLabel="Comment">@context.Comment</MudTd>
                <MudTd DataLabel="Reply">@context.Reply</MudTd>
                <MudTd DataLabel="Review At">@context.CreatedAt.ToString("MM/dd/yyyy hh:mm:ss tt")</MudTd>
                <MudTd DataLabel="Reply At">@context.ReplyCreatedAt?.ToString("MM/dd/yyyy hh:mm:ss tt")</MudTd>
                <MudTd>
                    @if (string.IsNullOrEmpty(@context.Reply))
                    {
                        <MudButton OnClick="@(() => OpenReplyDialog(@context.ReviewId))" Class="ma-2 rounded-pill" Style="width:80%;color:rgba(112, 0, 0, 1);">Reply</MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error">No reviews found for your merchant.</MudText>
    }
</MudContainer>

@if (showDialog)
{
    <div class="custom-dialog-backdrop">
        <div class="custom-dialog">
            <MudText Typo="Typo.h6">Reply to Review</MudText>
            <MudTextField @bind-Value="replyText" Label="Enter your reply" Variant="Variant.Outlined" Required="true" />
            @if (showReplyError)
            {
                <MudText Typo="Typo.caption" Color="Color.Error">Reply text is required.</MudText>
            }
            <MudButton OnClick="SubmitReply" Color="Color.Primary" Class="mt-2">Submit</MudButton>
            <MudButton OnClick="CancelReply" Color="Color.Secondary" Class="mt-2">Cancel</MudButton>
        </div>
    </div>
}

@code {
    private List<GetReviewResponseDTO> reviews = new();
    private bool isLoading = true;
    private bool showDialog = false;
    private string replyText = string.Empty;
    private bool showReplyError = false;
    private int _selectedReviewId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Merchant"))
            {
                isLoading = true;
                await LoadReviews();
                isLoading = false;
            }
            else
            {
                Console.WriteLine("User is not in the Merchant role.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadReviews()
    {
        try
        {
            reviews = await ReviewService.MerchantGetReviews();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
        }
    }

    private void OpenReplyDialog(int reviewId)
    {
        _selectedReviewId = reviewId;
        showDialog = true;
        replyText = string.Empty;
        showReplyError = false;
    }

    private async Task SubmitReply()
    {
        if (string.IsNullOrEmpty(replyText))
        {
            showReplyError = true;
            return;
        }

        try
        {
            var updateReplyDto = new UpdateReplyRequestDTO
            {
                Reply = replyText,
                ReplyCreatedAt = DateTime.UtcNow
            };

            var response = await ReviewService.UpdateReply(_selectedReviewId, updateReplyDto);
            if (response)
            {
                await LoadReviews(); // Reload reviews after submitting the reply
                CancelReply(); // Close the input after submitting
            }
            else
            {
                Console.WriteLine("Error submitting reply.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting reply: {ex.Message}");
        }
    }

    private void CancelReply()
    {
        showDialog = false;
    }
}

<style>
    .custom-dialog-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-dialog {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        max-width: 500px;
        width: 100%;
    }
</style>
