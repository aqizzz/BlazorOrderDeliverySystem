@page "/merchant/{userId:int}"
@using MudBlazor
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (merchant != null)
{
    <MudContainer Class="my-10">
        <MudText Class="pt-4" Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@(merchant?.BusinessName ?? "Unknown Merchant")</MudText>
        <MudTabs TabHeaderClass="d-flex justify-content-center mt-10" Elevation="1" Rounded="true" PanelClass="pa-6" ActiveTabClass="border-solid border-2 mud-border-primary">
            <MudTabPanel>
                <ChildContent>
                    <MudText>Custom tab content only</MudText>
                </ChildContent>
                <TabContent>
                    About
                </TabContent>
            </MudTabPanel>
            <MudTabPanel>
                <ChildContent>
                    <AddItemToCart merchantUserId="@merchant.UserId" />
                </ChildContent>
                <TabContent>
                    Menus
                </TabContent>
            </MudTabPanel>
            <MudTabPanel Text="Item Three">
                <ChildContent>
                    <ReviewList merchantUserId="@merchant.UserId" />
                </ChildContent>
                <TabContent>
                    Reviews
                </TabContent>

            </MudTabPanel>
        </MudTabs>
    </MudContainer>
}
else
{
    <p>Loading...</p>
}

@code {
   
    [Parameter]
    public int userId { get; set; }
    private MerchantProfileDTO? merchant;

 
    private bool isLoading = true;
  
    protected override async Task OnInitializedAsync()
    {
        await LoadMerchantItems();
    }

    private async Task LoadMerchantItems()
    {
        try
        {
            
                
        var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetFromJsonAsync<MerchantProfileDTO>($"api/profile/merchant/{userId}");

        if (response != null)
        {
            merchant = response;

        }
         
           
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
