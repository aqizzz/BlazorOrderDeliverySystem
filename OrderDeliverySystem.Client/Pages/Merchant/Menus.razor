@page "/merchant-items"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@using OrderDeliverySystem.Client.Shared
 @using OrderDeliverySystem.Share.Data.Models 
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<h3>Menus</h3>

<MudContainer Class="my-10">

    <h3>ItemList</h3>

    <!-- 表格显示部分 -->
    @* <MudTable Items="@Items" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"  @bind-SelectedItem="selectedItem1"> *@
        <MudTable Items="@Items" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<ViewItemDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Items</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Merchant ID</MudTh>
            <MudTh>Item ID</MudTh>
            <MudTh>Item Name</MudTh>         
            <MudTh>Item Description</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Item Picture</MudTh>
            <MudTh>Available</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="MerchantId">@context.MerchantId</MudTd>
            <MudTd DataLabel="ItemId">@context.ItemId</MudTd>
            <MudTd DataLabel="Name">@context.ItemName</MudTd>
            <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
            <MudTd DataLabel="Price">@context.ItemPrice.ToString("C")</MudTd>
            <MudTd DataLabel="Picture">@context.ItemPic</MudTd>          
            <MudTd DataLabel="Available">@context.ItemIsAvailable</MudTd>

            @* add to cart button  *@
            @* <MudTd DataLabel="Action">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddToCart(context)">
                    Add to Cart
                </MudButton>
            </MudTd> *@

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
  
 

    <!-- Temporary debugging using foreach loop to display raw data -->
   <div>
        <h3>Raw Data (for debugging)</h3>
        <ul>
            @foreach (var item in Items)
            {
                <li>@item.MerchantId - @item.ItemId - @item.ItemName - @item.ItemDescription - @item.ItemPrice - @item.ItemPic - @item.ItemIsAvailable</li>
            }
        </ul>
    </div> 

   <!-- 交互控件部分 -->
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Value="hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Value="dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Value="striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Value="bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />
        <div style="min-width:200px;">
            <MudText Class="align-self-center d-inline">Selected: @selectedItem1?.ItemName</MudText>
        </div>
    </div> 

</MudContainer>

@code {
    [Parameter]
    public int userId { get; set; }


    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ViewItemDTO selectedItem1 = null;
    private HashSet<ViewItemDTO> selectedItems = new HashSet<ViewItemDTO>();

    private List<ViewItemDTO> Items = new List<ViewItemDTO>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMenuItems();
    }

    private async Task LoadMenuItems()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            var response = await httpClient.GetFromJsonAsync<List<ViewItemDTO>>($"api/items/merchant/{userId}");

            if (response != null)
            {
                Items = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching items: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

     private bool FilterFunc1(ViewItemDTO item) => FilterFunc(item, searchString1);

    private bool FilterFunc(ViewItemDTO item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.ItemPrice}".Contains(searchString))
            return true;
        return false;
    }


    private async Task Modify(UpdateItemDTO item, int itemId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            // PUT 请求到 /api/items/{itemId} 来更新 Item
            var response = await httpClient.PutAsJsonAsync($"/api/items/{itemId}", item);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Item {item.ItemName} updated successfully.");
                // 如果成功，可以显示成功的消息或者做其他处理
            }
            else
            {
                Console.WriteLine($"Failed to update item {item.ItemName}. Response: {response.StatusCode}");
                // 处理失败情况，可以显示错误信息
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating item: {ex.Message}");
            // 可以选择显示异常消息或者做其他处理
        }
   }

    private async Task Remove(int itemId)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            // DELETE 请求到 /api/items/{itemId} 来删除 Item
            var response = await httpClient.DeleteAsync($"/api/items/{itemId}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Item with id {itemId} deleted successfully.");
                // 如果成功，可以在UI上更新列表，删除该 Item
            }
            else
            {
                Console.WriteLine($"Failed to delete item with id {itemId}. Response: {response.StatusCode}");
                // 处理失败情况，可以显示错误信息
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting item: {ex.Message}");
            // 可以选择显示异常消息或者做其他处理
        }
    }

}
