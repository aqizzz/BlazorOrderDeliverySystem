@page "/worker-profile"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@using MudBlazor
@using Newtonsoft.Json
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using System.Security.Claims
@using OrderDeliverySystem.Client.Infrastructure.Services.Profile
@using System.Text.Json
@inject IHttpClientFactory httpClientFactory
@inject NavigationManager NavigationManager
@inject IProfileService ProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveAuto


<MudContainer Class="my-10 d-flex justify-content-center align-content-center" MaxWidth="MaxWidth.ExtraLarge" Style="min-height:620px">
@if (isLoading)
{
    <p>Loading profile...</p>
}
else if (model != null)
{
        <MudPaper Class="px-16 pt-5 ma-2" Elevation="3" Width="100%">
        <div Style="display:none;">
            <MudField id="userId" Text="@model.UserId" />
        </div>
       
        <AuthorizeView Roles="Worker" Context="WorkerOnly">
            <Authorized>
                <div class=" d-flex justify-content-between align-content-center">
                    <MudText Class="py-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My profile</MudText>
                    <MudFab Href="/worker-profile/edit" Style="color:white;background-color:rgba(112, 0, 0, 1);" Label="Edit Profile"></MudFab>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class=" d-flex justify-content-between align-content-center">
                    <MudText Class="py-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">Worker profile</MudText>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        <MudDivider Style="color:rgba(112, 0, 0, 1);border-color:rgba(112, 0, 0, 1);border-width:3px;" />
        <MudGrid>
            <MudItem xs="2">
                <MudField Label="Firstname:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@model.FirstName</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>

            <MudItem xs="2">
                <MudField Label="Lastname:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@model.LastName</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>

            <MudItem xs="2">
                <MudField Label="Email:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@model.Email</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>

            <MudItem xs="2">
                <MudField Label="Phone:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@model.Phone</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>

            <MudItem xs="2">
                <MudField Label="Unit:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@model.Unit</MudText>
                </MudField>
            </MudItem>
                <MudItem xs="2"></MudItem>

            <MudItem xs="12" md="4" lg="2">
                <MudField Label="Address:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="12" md="6" lg="8">
                    <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                        <MudText>@model.Address</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="12" md="4" lg="2">
            </MudItem>

            <MudItem xs="12" md="4" lg="2">
                <MudField Label="City:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="12" md="6" lg="8">
                    <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                        <MudText >@model.City</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="12" md="4" lg="2">
            </MudItem>

            <MudItem xs="12" md="4" lg="2">
                <MudField Label="Province:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="12" md="6" lg="8">
                    <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                        <MudText>@model.Province</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="12" md="4" lg="2">
            </MudItem>

            <MudItem xs="12" md="4" lg="2">
                <MudField Label="Postcode:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="12" md="6" lg="8">
                    <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                        <MudText>@model.Postcode</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="12" lg="2">
            </MudItem>

            <MudItem xs="2">
                <MudField Label="Availability:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@(model.WorkerAvailability ? "Available" : "Not Available")</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>

            <MudItem xs="2">
                <MudField Label="Commission Rate:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@model.CommissionRate?.ToString("F2")</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>

            <MudItem xs="2">
                <MudField Label="Last Task Assigned:" AlignLabel="Align.Start" Underline="false" />
            </MudItem>
            <MudItem xs="8">
                <MudField Underline="false" Margin="Margin.None" Style="margin-top: 16px;">
                    <MudText>@(model.LastTaskAssigned?.ToString("g") ?? "N/A")</MudText>
                </MudField>
            </MudItem>
            <MudItem xs="2"></MudItem>
        </MudGrid>
    </MudPaper>
    }
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private WorkerProfileDTO model = new WorkerProfileDTO { WorkerAvailability = false };

    private ClaimsPrincipal user;

    [Parameter]
    public int UserId { get; set; }

    public bool ShowErrors { get; set; } = false;
    public IEnumerable<string> Errors { get; set; } = new List<string>();

    private bool isLoading = true;

    private async Task LoadWorkerProfile()
    {
        if (authenticationState is not null)
        {
            if (user is not null)
            {
                if (user.IsInRole("Admin"))
                {
                    model = await ProfileService.GetWorkerProfile(UserId);

                }
                else if (user.IsInRole("Worker"))
                {
                    model = await ProfileService.GetWorkerProfile();

                }
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        user = authState.User;
        await LoadWorkerProfile();
    }
}