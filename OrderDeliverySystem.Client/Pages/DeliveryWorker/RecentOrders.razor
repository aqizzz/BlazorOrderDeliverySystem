@page "/worker-orders"
@inject OrderService OrderService
@using OrderDeliverySystem.Client.Shared
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders;
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<MudContainer Class="my-10">
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My Orders</MudText>
        @if (recentOrders.Any())
        {
            @foreach (var order in recentOrders)
            {
            <!-- <OrderCard Order="@order" -->
            }
        }
        else
        {
            <MudText>You have no recent orders!</MudText>
        }

</MudContainer>
@code {

    private List<OrderDTO> recentOrders = new();
    private List<OrderDTO> orderHistory = new();
    // private OrderDTO? selectedOrder = new();
    [Inject]
    private IAuthService AuthService { get; set; }


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        int workerId = 9;
        //recentOrders = await OrderService.GetOrdersByRole("worker",  true);
       
    }
    private void ShowOrderDetails(OrderDTO order)
    {
        //selectedOrderItems = order.OrderItems;
    }
    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

}