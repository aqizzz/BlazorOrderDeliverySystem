@page "/worker-orders"
@using System.Net.Http.Json
@using MudBlazor
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using System.Security.Claims
@inject HttpClient httpClient
@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderService Orderservice
@rendermode InteractiveServer


<MudContainer Class="my-10">
    <MudPaper Class="px-16 pt-10 ma-2 " Elevation="3" Width="100%">
        <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My Orders</MudText>
@* 
        <div class=" mt-2 d-flex justify-content-between align-items-center">
            <MudText Class="pt-4" Typo="Typo.h4" GutterBottom="false">Users</MudText>
            <MudButton Variant="Variant.Text" OnClick="@(()=>SetAllUsers())">All Users</MudButton>
            <MudButton Variant="Variant.Text" OnClick="@(()=>SetMerchant())">Merchant</MudButton>
            <MudButton Variant="Variant.Text" OnClick="@(()=>SetWorker())">Worker</MudButton>
            <MudButton Variant="Variant.Text" OnClick="@(()=>SetCustomer())">Customer</MudButton>
            <MudFab Href="/admin/create" Style="color:rgba(112, 0, 0, 1);" Label="Create New Merchant/Worker" />
        </div> *@
        <MudDivider Class=" border-4" Style="border-color:rgba(112, 0, 0, 1);" />
    </MudPaper>
</MudContainer>

@code {

    private ClaimsPrincipal user;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    private IAuthService AuthService { get; set; }
    private bool isLoading = true;


    private string Role { get; set; }





    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;



    }

    @*private async Task SetRecent()
    {
        Role = "Merchant";
        await LoadUsersList();
        StateHasChanged();
    }

    private async Task SetDelivered()
    {
        Role = "Worker";
        await LoadUsersList();
        StateHasChanged();
    }*@

}