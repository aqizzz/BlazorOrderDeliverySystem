@page "/worker-history-orders"
@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient httpClient
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.Data.Models
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject OrderService Orderservice
@inject NavigationManager Navigation
@using System.Security.Claims
@rendermode InteractiveServer


<MudContainer Class="my-10">
	<ErrorsList ShowErrors="ShowErrors" Errors="Errors" />
	<MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My Orders</MudText>
	@if (isLoading)
	{
		<MudText>Loading...</MudText>
	}
	else if (orderHistory != null )
	{
		<MudTable Items="@orderHistory">
			<HeaderContent>
			<MudTh>Order Id</MudTh>
			<MudTh>Date</MudTh>
			<MudTh>Merchant</MudTh>
			<MudTh>Delivery Address</MudTh>
			<MudTh>No. of Items</MudTh>
			<MudTh>Commision</MudTh>
			</HeaderContent>
			<RowTemplate>
			<MudTd>@context.OrderId</MudTd>
			<MudTd>@context.CreatedAt</MudTd>
			<MudTd>@context.Merchant.BusinessName</MudTd>
			<MudTd>@context.Customer.User.Addresses.FirstOrDefault().FullAddress</MudTd>
			<MudTd>@context.OrderItems.Count()</MudTd>
			<MudTd>@context.DeliveryWorker.CommissionRate</MudTd>
			<MudTd></MudTd>
			</RowTemplate>
	</MudTable>
	
	}
	else
	{
		<MudText>No orders found for this worker!</MudText>
	}
</MudContainer>
@code {
	private ClaimsPrincipal user;

	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }
	private List<OrderDTO> orderHistory = new();
	[Inject]
	private IAuthService AuthService { get; set; }
	[Parameter]
	public int UserId { get; set; }
	private bool isLoading = true;


	public bool ShowErrors { get; set; } = false;
	public IEnumerable<string> Errors { get; set; } = new List<string>();

	protected override async Task OnInitializedAsync()
	{

		await base.OnInitializedAsync();
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			if (user.IsInRole("Worker"))
			{
				await LoadOrders();
			}
			else
			{
				Console.WriteLine("User is not in the Worker role.");
			}
		}
		else
		{
			Console.WriteLine("User is not authenticated");
		}


	}
	private async Task LoadOrders()
	{
		try
		{
			orderHistory = await Orderservice.GetOrdersTableByRole("worker", true);
			Console.WriteLine($"Order History Count: {orderHistory.Count}");
			if (orderHistory != null)
			{
				foreach (var order in orderHistory)
				{
					Console.WriteLine($"Order Id: {order.OrderId}, Created At: {order.CreatedAt}, Merchant: {order.Merchant.BusinessName}");
				}
			}
			

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading orders: {ex.Message}");
		}
		finally
		{
			isLoading = false;
			StateHasChanged();
		}
	}

	private void ShowOrderDetails(OrderDTO order)
	{
		//selectedOrderItems = order.OrderItems;
	}
	bool _expanded = true;

	private void OnExpandCollapseClick()
	{
		_expanded = !_expanded;
	}

}