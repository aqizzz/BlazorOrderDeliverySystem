@page "/addItems"
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.DTOs.CartDTO
@using OrderDeliverySystem.Client.Infrastructure.Services.Cart;
@using MudBlazor
@inject NavigationManager NavigationManager
@inject ICartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<MudContainer>
    <MudText Typo="Typo.h6" Style="color: rgba(112, 0, 0, 1);">Classic Breakfast Dishes</MudText>
    <MudDivider Class="mb-4" />

    <!-- Item 1: Chicken Sandwich -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="2">
                <MudAvatar Image="/images/chicken_sandwich.png" Size="Size.Medium" Class="mr-2" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1">Chicken Sandwich</MudText>
                <MudText Typo="Typo.body2">The perfect combination of a generous portion of breaded chicken, soft bun, and tart pickles, it's enhanced by only one thing: Polynesian sauce.</MudText>
                <MudText Typo="Typo.body2">$9.99</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(3, 1)">+</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Item 2: Fries -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="2">
                <MudAvatar Image="/images/fries.png" Size="Size.Medium" Class="mr-2" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1">Fries</MudText>
                <MudText Typo="Typo.body2">There is no competition; this is the most foolish thing Kanye West has ever said.</MudText>
                <MudText Typo="Typo.body2">$5.99</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(4, 1)">+</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Item 3: Noodle -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="2">
                <MudAvatar Image="/images/noodle.png" Size="Size.Medium" Class="mr-2" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1">Noodle</MudText>
                <MudText Typo="Typo.body2">Noodle description</MudText>
                <MudText Typo="Typo.body2">$12.99</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(5, 1)">+</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Clear Cart Button -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="12" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Large" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="ClearCart">Clear Cart</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<AddUpdateCartItemsRequestDTO> cartItems = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated && user.IsInRole("Customer"))
        {
            isLoading = false;
        }
        else
        {
            Console.WriteLine("User is not authenticated or not in the Customer role.");
            await JSRuntime.InvokeVoidAsync("console.log", "Access Denied");
        }
    }

    public async Task AddToCart(int itemId, int quantity)
    {
        try
        {
            var cartItemDto = new List<AddUpdateCartItemsRequestDTO>
            {
                new AddUpdateCartItemsRequestDTO(itemId, quantity)
            };

            Console.WriteLine($"Adding item {itemId} with quantity {quantity}");

            var response = await CartService.AddToCartItems(cartItemDto);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Item {itemId} added to cart successfully.");
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add item {itemId} to cart. Error: {errorMsg}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding item to cart: {ex.Message}");
        }
    }

    public async Task ClearCart()
    {
        try
        {
            var response = await CartService.ClearCartItems();

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Cart cleared successfully.");
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to clear cart. Error: {errorMsg}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing cart: {ex.Message}");
        }
    }
}
