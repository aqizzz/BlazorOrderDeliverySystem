@page "/order-now"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization;
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.DTOs.PlacedOrderDTO
@using OrderDeliverySystem.Share.DTOs.CartDTO
@using OrderDeliverySystem.Share.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Infrastructure.Services.Cart
@using System.Security.Claims
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Infrastructure.Services.Profile
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IProfileService ProfileService
@inject ICartService CartService
@inject OrderService OrderService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

 
<MudContainer Class="my-10">
@if (isLoading)
{
    <MudText Typo="Typo.body1">Loading...</MudText>
}
else
{
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="true">Place Order</MudText>
    <MudDivider Class=" border-4" Style="border-color:rgba(112, 0, 0, 1);" />
   <MudContainer Class="my-3">
        <MudText Class="pt-4" Typo="Typo.h6" Align="Align.Start" GutterBottom="true" Style="color:rgba(112, 0, 0, 1);">Customer Info</MudText>
        <MudDivider Class=" border-2" Style="border-color:rgba(112, 0, 0, 1);" />
           
          <AddressCreate/>
          
          <div>@totalAmount</div>
    </MudContainer>
    <MudContainer Class="my-3">
        <MudText Class="pt-4" Typo="Typo.h6" Align="Align.Start" GutterBottom="true" Style="color:rgba(112, 0, 0, 1);">Place Order</MudText>
            <MudDivider Class="mb-2 border-2" Style="border-color:rgba(112, 0, 0, 1);" />
             <MudGrid>
                <MudItem xs="12" sm="12" md="9">
                    @if (merchants == null)
                    {
                        <MudText Typo="Typo.body2">No merchant</MudText>
                    }
                    else
                    {
                        @foreach(var merchant in merchants){

                         @if (merchant != null)
                         {
               
                       <MudGrid Class="ps-10 ">
                        <MudItem xs="12" sm="12" md="6">
                            <MudGrid Class="ps-10 ">
                                <MudItem xs="4">
                                                @*<MudImage Src="@merchant.MerchantPic" Width="60" Height="35" Alt="@merchant.BusinessName" Class="rounded-lg mt-4 my-2" />*@
                                </MudItem>

                                <MudItem xs="8">
                                    <MudText Typo="Typo.h6">@merchant.BusinessName</MudText>
                                    <MudText Typo="Typo.body2">@merchant.MerchantDescription</MudText>
                                </MudItem>
                                 <MudItem xs="12" >

                                    <MudIcon Class="d-inline-block" Icon="@Icons.Material.Outlined.AccessTime"></MudIcon>
                                    <MudText Class="d-inline-block"  Typo="Typo.body2">
                                Time:
                                        @(merchant.PreparingTime.HasValue ? merchant.PreparingTime.Value + 15 : 30) ~ @(merchant.PreparingTime.HasValue ? merchant.PreparingTime.Value + 30 : 45) mins
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudIcon Class="d-inline-block" Icon="@Icons.Material.Outlined.LocationOn"></MudIcon>
                                            
                                    @if (merchant.Address == null && merchant.City == null)
                                    {
                                                    <MudText Class="inline-block" Typo="Typo.body2">Address: No Addres Information.</MudText>
                                    }
                                    else
                                    {
                                        @if (merchant.Unit == "")
                                        {
                                                        <MudText Class="d-inline-block" Typo="Typo.body2">Address:  @merchant.Address , @merchant.City , @merchant.Postcode</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2">Address: @merchant.Unit, @merchant.Address, @merchant.City, @merchant.Postcode</MudText>
                                        }
                                    }

                                </MudItem>
                            </MudGrid>
                        </MudItem>
                         <MudItem xs="12" sm="9" md="6"> 
                        
                            @if (cartItems != null)
                            {
                                foreach ( var theitem in cartItems)
                                { 
                                    <div class="d-flex justify-content-around align-items-center">
                                            @*<MudImage Src="@theitem.ItemPic" Width="60" Height="35" Alt="@merchant.FirstName" Class="rounded-lg mt-4" />*@
                                            <MudText>@theitem.ItemName</MudText>
                                            <MudText> @theitem.ItemPrice</MudText>
                                            <MudText>@theitem.Quantity</MudText>
                                    </div>
                                }
                                    }
                                </MudItem>
                                   
                            </MudGrid>
                                <MudDivider Class="my-2 border-2" Style="border-color:rgba(112, 0, 0, 1);" />
                               
                        }
                    }
                       
                }
                   
                </MudItem>

                <MudItem xs="12" sm="12" md="3" Class="d-flex align-content-end">
                    <div>
                    <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Total(Before tax): $@subtotal</MudText>
                        <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Tax (15%): $@GetTaxAmount().ToString("C")x</MudText>
                    <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Total(After tax):  $@total</MudText>
                    <MudText Class="pt-4 ps-6 border-b-2 border-solid mb-2" Typo="Typo.body2" Align="Align.Start" GutterBottom="true" Style="border-color:rgba(112, 0, 0, 1);">Delevery Fee:  $ @GetTotalAfterTax().ToString("C")</MudText>
                        <MudText Class="pt-4 ps-6" Typo="Typo.subtitle2" Align="Align.Start" GutterBottom="true">Total Amount:  $ @GetTotalAmount().ToString("C")</MudText>
                    </div>
                </MudItem>
                   
            </MudGrid>
              <MudDivider Class="mt-5 border-2" Style="border-color:rgba(112, 0, 0, 1);" />
    </MudContainer>
    <MudCardActions>
           
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="CreateOrder">Register</MudButton>
    </MudCardActions>
    }
</MudContainer>


@code {
        [CascadingParameter]
        private Task<AuthenticationState> authenticationState { get; set; }
    private ClaimsPrincipal user;

    [Parameter]
    public int UserId { get; set; }

    public CreateOrderDTO order = new CreateOrderDTO();

    private const decimal TaxRate = 0.15m;
    private const decimal DeliveryFee = 6.00m;
    public bool ShowErrors { get; set; } = false;
    public string Errors { get; set; } = string.Empty;

    int itemId;


    private decimal subtotal;
    private decimal total;
    private decimal fee;
    private decimal totalAmount;
    private decimal tax;
    private decimal deliveryFee;
    private int cartId { get; set; }
    private int customerId { get; set; }
    private int merchantId { get; set; }


    private bool isLoading = true;
    private List<int> merchantIds = new();
    private List<MerchantProfileDTO> merchants = new();

    private List<GetOrderItemResponseDTO> cartItems = new();

    bool success;

    [Inject]
    private IAuthService AuthService { get; set; }

    public string SelectedOption { get; set; } 

    private UserProfileDTO model = new();

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Customer"))
            {
                await LoadCartItems();

            }
            else
            {
                Console.WriteLine("User is not in the Customer role.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }

    }



    private async Task LoadCartItems()
    {
        try
        {
            var response = await OrderService.GetOrderByCart();

            if (response != null)
            {
                cartItems = response.CartItems;

                subtotal = cartItems.Sum(ci => ci.Quantity * ci.ItemPrice);
                tax = GetTaxAmount();
                total = GetTotalAfterTax();


                cartId = response.CartId;
                customerId = response.CustomerId;

                if (cartItems?.Any() == true)
                {


                    foreach(var theItem in cartItems)
                    {

                        if (theItem != null )
                        {
                            var merchanId = theItem.MerchantId;
                            var merchant = theItem.MerchantProfile;
                            if (merchant != null)
                            {
                                if (!merchantIds.Contains(merchanId))
                                {
                                    merchantIds.Add(merchanId);
                                    totalAmount = GetTotalAmount();
                                    merchants.Add(merchant);
                                }
                            }


                        }
                        else
                        {
                            // Handle case where theItem is null (optional)
                            Console.WriteLine("Warning: cart item is null.");
                        }
                    }

                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private decimal GetTaxAmount()
    {
        return subtotal * TaxRate;
    }
    private decimal GetTotalAfterTax()
    {
        return subtotal + GetTaxAmount();
    }

    private decimal GetDeliveryFee()
    {
        List<int> merchantAddresses = new();
        foreach(var merchant in merchants)
        {
            var address = merchant.Address + merchant.City + merchant.Province;
            if (!merchantAddresses.Contains(merchant.UserId))
            {
                merchantAddresses.Add(merchant.UserId);

            }
        }
        if (merchantAddresses.Count > 0){
            return GetTotalAfterTax() + DeliveryFee * merchantAddresses.Count();
        }

        return GetTotalAfterTax() + DeliveryFee;
    }

    private decimal GetTotalAmount()
    {
        return GetTotalAfterTax() + DeliveryFee;
    }


    private async Task CreateOrder()
    {

        order.CartId = cartId;
        order.CustomerId = customerId;
        order.MerchantIds = merchantIds;
        order.Merchants = merchants;
        order.CartItems = cartItems;

        var result = await OrderService.CreateOrder(order); // Update customer data

        if (result.Succeeded)
        {
            ShowErrors = false;
            await ClearCart();
            StateHasChanged();
            NavigationManager.NavigateTo("/my-orders");

        }
        else
        {
            Errors = result.Error;
            ShowErrors = true;
        }



}
public async Task ClearCart()
{
    try
    {
        var response = await CartService.ClearCartItems();

        if (response.IsSuccessStatusCode)
        {
            await LoadCartItems();
            Console.WriteLine("Cart cleared successfully.");
        }
        else
        {
            var errorMsg = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to clear cart. Error: {errorMsg}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error clearing cart: {ex.Message}");
    }

}
}
    