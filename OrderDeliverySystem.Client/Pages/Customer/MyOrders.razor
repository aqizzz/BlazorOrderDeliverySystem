@page "/my-orders"
@inject OrderService OrderService

@using OrderDeliverySystem.Client.Shared
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders;
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<MudContainer Class="my-10">
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="false">My Orders</MudText>
    <MudTabs TabHeaderClass="d-flex justify-content-end " Elevation="1" Rounded="true" PanelClass="pa-6" ActiveTabClass="border-solid border-1 mud-border-primary">

        <MudTabPanel>
            <ChildContent>
                @if (recentOrders.Any())
                {
                    @foreach (var order in recentOrders)
                    {
                        <OrderCard Order="@order" />
                    }
                }
                else
                {
                    <MudText>You have no recent orders!</MudText>
                }

            </ChildContent>
            <TabContent>
                Recent Orders
            </TabContent>
        </MudTabPanel>
        <MudTabPanel>
            <ChildContent>
                @if (orderHistory.Any())
                {
                    @foreach (var order in orderHistory)
                    {
                        <OrderCard Order="@order" />
                    }
                }
                else
                {
                    <MudText>You have no orders!</MudText>
                }
            </ChildContent>

            <TabContent>
                Order History
            </TabContent>
        </MudTabPanel>
    </MudTabs>


</MudContainer>
@code {
    private ClaimsPrincipal user;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private List<OrderDTO> recentOrders = new();
    private List<OrderDTO> orderHistory = new();
    // private OrderDTO? selectedOrder = new();
    [Inject]
    private IAuthService AuthService { get; set; }
    [Parameter]
    public int UserId { get; set; }
    private bool isLoading = true;


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Customer"))
            {
                await LoadOrders();

            }
            else
            {
                Console.WriteLine("User is not in the Customer role.");
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated");
        }


    }

    bool _expanded = true;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }


    private async Task LoadOrders()
    {
        try
        {
            recentOrders = await OrderService.GetOrdersTableByRole("customer", true);
            orderHistory = await OrderService.GetOrdersTableByRole("customer", false);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading Orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}