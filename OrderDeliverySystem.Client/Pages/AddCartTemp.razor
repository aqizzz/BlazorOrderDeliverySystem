@page "/addItems"
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.DTOs.CartDTO
@inject IHttpClientFactory HttpClientFactory
@using MudBlazor
@using System.Net.Http.Json
@inject HttpClient httpClient
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<MudContainer>
    <MudText Typo="Typo.h6" Style="color: rgba(112, 0, 0, 1);">Classic Breakfast Dishes</MudText>
    @foreach (var item in Items)
    {
        <div>@item.ItemId</div>
    }
    <MudDivider Class="mb-4" />

    <!-- Item 1: Chicken Sandwich -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="2">
                <MudAvatar Image="/images/chicken_sandwich.png" Size="Size.Medium" Class="mr-2" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1">Chicken Sandwich</MudText>
                <MudText Typo="Typo.body2">The perfect combination of a generous portion of breaded chicken, soft bun, and tart pickles, it's enhanced by only one thing: Polynesian sauce.</MudText>
                <MudText Typo="Typo.body2">$9.99</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(3, 1)">+</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Item 2: Fries -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="2">
                <MudAvatar Image="/images/fries.png" Size="Size.Medium" Class="mr-2" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1">Fries</MudText>
                <MudText Typo="Typo.body2">There is no competition; this is the most foolish thing Kanye West has ever said.</MudText>
                <MudText Typo="Typo.body2">$5.99</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(4, 1)">+</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Item 3: Noodle -->
    <MudPaper Class="pa-3 mb-3" Elevation="1">
        <MudGrid>
            <MudItem xs="2">
                <MudAvatar Image="/images/noodle.png" Size="Size.Medium" Class="mr-2" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1">Noodle</MudText>
                <MudText Typo="Typo.body2">Noodle description</MudText>
                <MudText Typo="Typo.body2">$12.99</MudText>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-items-center justify-center">
                <MudButton Variant="Variant.Filled" Size="Size.Small" Style="background-color: rgba(112, 0, 0, 1); color: white;" OnClick="() => AddToCart(5, 1)">+</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    [Parameter]
    public int userId { get; set; }

    private int customerId = 3;

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private ViewItemDTO selectedItem1 = null;
    private HashSet<ViewItemDTO> selectedItems = new HashSet<ViewItemDTO>();

    private List<ViewItemDTO> Items = new List<ViewItemDTO>();

    protected override async Task OnInitializedAsync()
    {
        // Items = await httpClient.GetFromJsonAsync<List<ViewItemDTO>>("/api/items");
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");
            Items = await httpClient.GetFromJsonAsync<List<ViewItemDTO>>("api/items/merchant/{userId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching items: {ex.Message}");
            // 你可以在页面上显示一个错误消息
        }
    }

    private bool FilterFunc1(ViewItemDTO item) => FilterFunc(item, searchString1);

    private bool FilterFunc(ViewItemDTO item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.ItemName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (item.ItemDescription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{item.ItemPrice}".Contains(searchString))
            return true;
        return false;
    }


   
    public async Task AddToCart(int itemId, int quantity)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("API");

            
            var cartItemDto = new List<AddUpdateCartItemsRequestDTO>
            {
                new AddUpdateCartItemsRequestDTO(itemId, quantity)
            };

            
            Console.WriteLine($"Adding item {itemId} with quantity {quantity} for customer {customerId}");

            
            var response = await httpClient.PostAsJsonAsync($"api/cart/addCart/{customerId}", cartItemDto);

           
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Item {itemId} added to cart successfully.");
            }
            else
            {
                var errorMsg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to add item {itemId} to cart. Status Code: {response.StatusCode}, Message: {errorMsg}");
            }
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error adding item to cart: {ex.Message}");
        }
    }
}
