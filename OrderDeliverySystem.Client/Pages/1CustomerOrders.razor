@page "/customer/orders"
@inject OrderService OrderService

@using System.ComponentModel.DataAnnotations
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders;
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.Data
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<MudContainer>
	<h3> My Orders</h3>
	<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
		@*Recent Orders*@
		<MudTabPanel Text="Recent Orders">
			<MudList T="string">
				@if (recentOrders.Any())
				{
				@foreach (var order in recentOrders)
				{
					<MudListItem>
						<MudText>OrderId: @order.OrderId</MudText>
						<MudText>Status: @order.Status</MudText>
						<MudText>Total: @order.TotalAmount</MudText>
						<MudButton>View Items</MudButton>
					</MudListItem>
					}
				}else
				{
					<MudText>You have no recent orders!</MudText>
				}
			</MudList>
		</MudTabPanel>
		@*Order History*@
		<MudTabPanel Text="Order History">
			<MudList T="string">
				@if (orderHistory.Any())
				{
				@foreach (var order in orderHistory)
				{
					<MudListItem>
						<MudText>OrderId: @order.OrderId</MudText>
						<MudText>Status: @order.Status</MudText>
						<MudText>Total: @order.TotalAmount</MudText>
						<MudButton>View Items</MudButton>
					</MudListItem>
				}
				}
				else
				{
					<MudText>You have no orders!</MudText>
				}
			</MudList>
		</MudTabPanel>
	</MudTabs>
</MudContainer>



@code {
	private List<OrderDTO> recentOrders = new();
	private List<OrderDTO> orderHistory = new();
	private OrderDTO? selectedOrder= new();

	protected override async Task OnInitializedAsync()
	{
		int customerId = 13;
		recentOrders = await OrderService.GetOrdersByRoleAsync("customer", customerId, true);
		orderHistory = await OrderService.GetOrdersByRoleAsync("customer", customerId, false);
	}
	private void ShowOrderDetails(OrderDTO order)
	{
		//selectedOrderItems = order.OrderItems;
	}
}
