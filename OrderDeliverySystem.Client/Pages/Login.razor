@page "/login"
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using OrderDeliverySystem.Client.Shared.Common
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation
@inject IAuthService AuthService
@rendermode InteractiveServer
<MudContainer Class="my-10">
<div class="container d-flex flex-column align-items-center min-vh-100 mt-20">
<h3>Login</h3>

@* Display message to user if it's not empty *@
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass" role="alert">
        @message
    </div>
}

<EditForm Model="@model" OnValidSubmit="HandleLogin" FormName="loginForm">
    <ErrorsList ShowErrors="@ShowErrors" Errors="@Errors" />
    <DataAnnotationsValidator />

    <MudField Underline="false">
        <MudTextField id="email" @bind-Value="model.Email" Label="Email" For="@(() => model.Email)" Variant="Variant.Outlined" />
    </MudField>
  
    <MudField Underline="false">
        <MudTextField id="Password" @bind-Value="model.Password" Label="Password" For="@(() => model.Password)" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Buttonclick" AdornmentAriaLabel="Show Password" />
    </MudField>

    <div style="display: flex; justify-content: center;" class="mt-6">
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="Class.object-center"> Login </MudButton>
    </div>
</EditForm>

        <p class="text-center mt-4">Don't have account? <a class="text-decoration-underline" href="/register">Create one now</a></p>
 </div>
</MudContainer>
@code {
    // Create an instance of LoginModel to bind form data
    private readonly LoginRequestDTO model = new LoginRequestDTO();

    public bool ShowErrors { get; set; } = false;

    public string Errors { get; set; } = string.Empty;

    private string message { get; set; } = string.Empty;
    private string alertClass { get; set; } = string.Empty;
    private bool showAlert { get; set; } = false;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    // Handle form submission
    private async Task HandleLogin()
    {
        // Send a POST request to the login API endpoint
        var result = await this.AuthService.Login(this.model);

        if (result.Succeeded)
        {

            this.ShowErrors = false;

            this.message = "You have successfully logged in!";
            this.alertClass = "alert-success";
            this.showAlert = true;

            await Task.Delay(3000);

            // Login successful, navigate to home page or dashboard
                
            Navigation.NavigateTo("/", forceLoad: true);
            StateHasChanged();
        }
        else
        {
            // Handle login failure
            this.Errors = result.Error;
            this.ShowErrors = true;
        }
    }

    void Buttonclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}